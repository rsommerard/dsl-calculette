/*
 * generated by Xtext
 */
package compil.dslcalculette.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import compil.dslcalculette.dCalc.AbstractExpression
import java.util.List
import compil.dslcalculette.dCalc.Expression
import java.util.HashMap
import java.util.ArrayList

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class DCalcGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		var aes = resource.allContents.filter(AbstractExpression).toList()
    	fsa.generateFile("DSLCalculette.java", aes.compile)
	}
	
	def CharSequence compile(List<AbstractExpression> aes) '''
		public class DSLCalculette {
			public static void main(String[] args) {
				int res = 0;
				«FOR ae: aes»
					«IF ae.expression.left != null»
						«IF ae.expression.left.name != null»
							«IF ae.expression.operateur.equals("=")»
								int _«ae.expression.left.name» = 
							«ELSE»
								res = _«ae.expression.left.name»
							«ENDIF»
						«ELSE»
							res = 
						«ENDIF»
						«ae.compile»;
						«IF ae.expression.operateur.equals("=")»
							res = «ae.compile»;
						«ENDIF»
					«ELSE»
						res = _«ae.expression.name»;
					«ENDIF»
				«ENDFOR»
				System.out.println(res);
			}
		}
  	'''
  	
  	def CharSequence compile(AbstractExpression ae) '''
  		«IF ae.expression.left.name == null»
  			(«IF ae.expression.left == null»
  				«IF ae.expression.signe != null»
  					«ae.expression.signe»
  				«ENDIF»
  				«ae.expression.valeur»
  			«ELSE»
  				«IF ae.expression.left.signe != null»
  					«ae.expression.left.signe»
  				«ENDIF»
  				«ae.expression.left.valeur»
  				«IF ae.expression.operateur != null»
  					«ae.expression.operateur»
  				«ENDIF»
  				«IF ae.expression.right != null»
  					«ae.expression.right.compile»
  				«ENDIF»
  			«ENDIF»)
  		«ELSE»
  			(«IF ae.expression.left.signe != null»
  					«ae.expression.left.signe»
  				«ENDIF»
  				«ae.expression.left.valeur»
  				«IF ae.expression.operateur != null»
  					«ae.expression.operateur»
  				«ENDIF»
  				«IF ae.expression.right != null»
  					«ae.expression.right.compile»
  				«ENDIF»)
  		«ENDIF»
  	'''
  	
  	def CharSequence compile(Expression e) '''
  		(«IF e.left != null»
  			«IF e.left.name != null»
  				_«e.left.name»
  			«ELSE»
  				«IF e.left.signe != null»
  					«e.left.signe»
  				«ENDIF»
  				«e.left.valeur»
  			«ENDIF»
  		«ENDIF»
  		«IF e.operateur != null»
  			«e.operateur»
  		«ENDIF»
  		«IF e.right != null»
  			«e.right.compile»
  		«ELSE»
  			«e.valeur»
  		«ENDIF»)
  	'''
}