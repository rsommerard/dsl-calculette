/*
 * generated by Xtext
 */
package fr.univLille1.compil.calculette.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import fr.univLille1.compil.calculette.calculette.Calculette
import fr.univLille1.compil.calculette.calculette.Expr
import fr.univLille1.compil.calculette.calculette.Calc
import fr.univLille1.compil.calculette.calculette.Number
import org.eclipse.emf.ecore.EObject
import fr.univLille1.compil.calculette.calculette.Var
import fr.univLille1.compil.calculette.calculette.Affect
import fr.univLille1.compil.calculette.calculette.Ligne
import fr.univLille1.compil.calculette.calculette.Ans
import java.util.List
import java.util.ArrayList

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class CalculetteGenerator implements IGenerator {
    Iterable<Affect> variables
    List<CharSequence> stack = new ArrayList<CharSequence>();
    
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		variables = resource.allContents.toIterable.filter(Affect)
		for(c: resource.allContents.toIterable.filter(Calculette))
		   fsa.generateFile(
		   	  "calculette/Calc.java",
		   	  c.compile
		   )
	}
	
	def CharSequence compile(EObject o) {	
		switch o {
			Calculette : process(o)
	        Ligne : '''«o.e.compile»'''
	        Calc : calcProcess(o)
	        Var : '''_«o.name»'''
            Number : '''«IF o.neg»-«ENDIF»«o.value»'''
	        Ans : depile(o)
	        Expr : '''(«o.left.compile») «o.op» («o.right.compile»)'''
	        Affect : '''_«o.name» = «o.right.compile»;'''
		}
	}
	
	def CharSequence process(Calculette o) {
		stack.clear();
		stack.add('0');
		stack.add('0');
		stack.add('0');
		'''
		package calculette;
		
		public class Calc {
			public static void main(String [ ] args)
				{
					int res = 0;
					«FOR variable:variables»
						int _«variable.name»;
					«ENDFOR»
					«FOR calcs:o.calculs»
						«calcs.compile»
					«ENDFOR»
					System.out.println(res);
				}
			
		}
	'''
	}

	def CharSequence calcProcess(Calc o) {
		'''res = «empile(o.e.compile)»;'''
	}
	
	def CharSequence empile(CharSequence cs) {
		stack.remove(0)
		stack.add(cs)
		cs
	}
	
	def CharSequence depile(Ans o) {
		var index = 0
		switch o.name {
			case '#1' : index = 2
			case '#2' : index = 1
			case '#3' : index = 0
		}
		stack.get(index)
	}
}