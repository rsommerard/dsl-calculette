/*
* generated by Xtext
*/
grammar InternalDCalc;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package compil.dslcalculette.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package compil.dslcalculette.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import compil.dslcalculette.services.DCalcGrammarAccess;

}

@parser::members {
 
 	private DCalcGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DCalcGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getAbstractExpressionsAssignment()); }
(rule__Model__AbstractExpressionsAssignment)*
{ after(grammarAccess.getModelAccess().getAbstractExpressionsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractExpression
entryRuleAbstractExpression 
:
{ before(grammarAccess.getAbstractExpressionRule()); }
	 ruleAbstractExpression
{ after(grammarAccess.getAbstractExpressionRule()); } 
	 EOF 
;

// Rule AbstractExpression
ruleAbstractExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractExpressionAccess().getGroup()); }
(rule__AbstractExpression__Group__0)
{ after(grammarAccess.getAbstractExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperande
entryRuleOperande 
:
{ before(grammarAccess.getOperandeRule()); }
	 ruleOperande
{ after(grammarAccess.getOperandeRule()); } 
	 EOF 
;

// Rule Operande
ruleOperande
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperandeAccess().getGroup()); }
(rule__Operande__Group__0)
{ after(grammarAccess.getOperandeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerme
entryRuleTerme 
:
{ before(grammarAccess.getTermeRule()); }
	 ruleTerme
{ after(grammarAccess.getTermeRule()); } 
	 EOF 
;

// Rule Terme
ruleTerme
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermeAccess().getAlternatives()); }
(rule__Terme__Alternatives)
{ after(grammarAccess.getTermeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Expression__OperateurAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOperateurPlusSignKeyword_1_1_0_0()); }

	'+' 

{ after(grammarAccess.getExpressionAccess().getOperateurPlusSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getOperateurHyphenMinusKeyword_1_1_0_1()); }

	'-' 

{ after(grammarAccess.getExpressionAccess().getOperateurHyphenMinusKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operande__OperateurAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandeAccess().getOperateurAsteriskKeyword_1_1_0_0()); }

	'*' 

{ after(grammarAccess.getOperandeAccess().getOperateurAsteriskKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getOperandeAccess().getOperateurSolidusKeyword_1_1_0_1()); }

	'/' 

{ after(grammarAccess.getOperandeAccess().getOperateurSolidusKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Terme__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermeAccess().getGroup_0()); }
(rule__Terme__Group_0__0)
{ after(grammarAccess.getTermeAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getTermeAccess().getGroup_1()); }
(rule__Terme__Group_1__0)
{ after(grammarAccess.getTermeAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getTermeAccess().getValeurAssignment_2()); }
(rule__Terme__ValeurAssignment_2)
{ after(grammarAccess.getTermeAccess().getValeurAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__AbstractExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractExpression__Group__0__Impl
	rule__AbstractExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractExpressionAccess().getExpressionAssignment_0()); }
(rule__AbstractExpression__ExpressionAssignment_0)
{ after(grammarAccess.getAbstractExpressionAccess().getExpressionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractExpressionAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getAbstractExpressionAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOperandeParserRuleCall_0()); }
	ruleOperande
{ after(grammarAccess.getExpressionAccess().getOperandeParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
(rule__Expression__Group_1__0)?
{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getExpressionAccess().getExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__1__Impl
	rule__Expression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOperateurAssignment_1_1()); }
(rule__Expression__OperateurAssignment_1_1)
{ after(grammarAccess.getExpressionAccess().getOperateurAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
(rule__Expression__RightAssignment_1_2)
{ after(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Operande__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operande__Group__0__Impl
	rule__Operande__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operande__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandeAccess().getTermeParserRuleCall_0()); }
	ruleTerme
{ after(grammarAccess.getOperandeAccess().getTermeParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operande__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operande__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operande__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandeAccess().getGroup_1()); }
(rule__Operande__Group_1__0)?
{ after(grammarAccess.getOperandeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operande__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operande__Group_1__0__Impl
	rule__Operande__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operande__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandeAccess().getExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOperandeAccess().getExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operande__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operande__Group_1__1__Impl
	rule__Operande__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operande__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandeAccess().getOperateurAssignment_1_1()); }
(rule__Operande__OperateurAssignment_1_1)
{ after(grammarAccess.getOperandeAccess().getOperateurAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operande__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operande__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operande__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandeAccess().getRightAssignment_1_2()); }
(rule__Operande__RightAssignment_1_2)
{ after(grammarAccess.getOperandeAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Terme__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terme__Group_0__0__Impl
	rule__Terme__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terme__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermeAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getTermeAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Terme__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terme__Group_0__1__Impl
	rule__Terme__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Terme__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermeAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
{ after(grammarAccess.getTermeAccess().getExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Terme__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terme__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terme__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermeAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getTermeAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Terme__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terme__Group_1__0__Impl
	rule__Terme__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terme__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermeAccess().getSigneAssignment_1_0()); }
(rule__Terme__SigneAssignment_1_0)
{ after(grammarAccess.getTermeAccess().getSigneAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Terme__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terme__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terme__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermeAccess().getValeurAssignment_1_1()); }
(rule__Terme__ValeurAssignment_1_1)
{ after(grammarAccess.getTermeAccess().getValeurAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__AbstractExpressionsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAbstractExpressionsAbstractExpressionParserRuleCall_0()); }
	ruleAbstractExpression{ after(grammarAccess.getModelAccess().getAbstractExpressionsAbstractExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractExpression__ExpressionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractExpressionAccess().getExpressionExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getAbstractExpressionAccess().getExpressionExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OperateurAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOperateurAlternatives_1_1_0()); }
(rule__Expression__OperateurAlternatives_1_1_0)
{ after(grammarAccess.getExpressionAccess().getOperateurAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRightExpressionParserRuleCall_1_2_0()); }
	ruleExpression{ after(grammarAccess.getExpressionAccess().getRightExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operande__OperateurAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandeAccess().getOperateurAlternatives_1_1_0()); }
(rule__Operande__OperateurAlternatives_1_1_0)
{ after(grammarAccess.getOperandeAccess().getOperateurAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operande__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandeAccess().getRightExpressionParserRuleCall_1_2_0()); }
	ruleExpression{ after(grammarAccess.getOperandeAccess().getRightExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Terme__SigneAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermeAccess().getSigneHyphenMinusKeyword_1_0_0()); }
(
{ before(grammarAccess.getTermeAccess().getSigneHyphenMinusKeyword_1_0_0()); }

	'-' 

{ after(grammarAccess.getTermeAccess().getSigneHyphenMinusKeyword_1_0_0()); }
)

{ after(grammarAccess.getTermeAccess().getSigneHyphenMinusKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Terme__ValeurAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermeAccess().getValeurINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getTermeAccess().getValeurINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Terme__ValeurAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermeAccess().getValeurINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getTermeAccess().getValeurINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


