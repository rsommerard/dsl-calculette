/*
* generated by Xtext
*/
package compil.dslcalculette.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import compil.dslcalculette.services.DCalcGrammarAccess;

public class DCalcParser extends AbstractContentAssistParser {
	
	@Inject
	private DCalcGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected compil.dslcalculette.ui.contentassist.antlr.internal.InternalDCalcParser createParser() {
		compil.dslcalculette.ui.contentassist.antlr.internal.InternalDCalcParser result = new compil.dslcalculette.ui.contentassist.antlr.internal.InternalDCalcParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExpressionAccess().getOperateurAlternatives_1_1_0(), "rule__Expression__OperateurAlternatives_1_1_0");
					put(grammarAccess.getOperandeAccess().getOperateurAlternatives_1_1_0(), "rule__Operande__OperateurAlternatives_1_1_0");
					put(grammarAccess.getTermeAccess().getAlternatives(), "rule__Terme__Alternatives");
					put(grammarAccess.getAbstractExpressionAccess().getGroup(), "rule__AbstractExpression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getOperandeAccess().getGroup(), "rule__Operande__Group__0");
					put(grammarAccess.getOperandeAccess().getGroup_1(), "rule__Operande__Group_1__0");
					put(grammarAccess.getTermeAccess().getGroup_0(), "rule__Terme__Group_0__0");
					put(grammarAccess.getTermeAccess().getGroup_1(), "rule__Terme__Group_1__0");
					put(grammarAccess.getModelAccess().getAbstractExpressionsAssignment(), "rule__Model__AbstractExpressionsAssignment");
					put(grammarAccess.getAbstractExpressionAccess().getExpressionAssignment_0(), "rule__AbstractExpression__ExpressionAssignment_0");
					put(grammarAccess.getExpressionAccess().getOperateurAssignment_1_1(), "rule__Expression__OperateurAssignment_1_1");
					put(grammarAccess.getExpressionAccess().getRightAssignment_1_2(), "rule__Expression__RightAssignment_1_2");
					put(grammarAccess.getOperandeAccess().getOperateurAssignment_1_1(), "rule__Operande__OperateurAssignment_1_1");
					put(grammarAccess.getOperandeAccess().getRightAssignment_1_2(), "rule__Operande__RightAssignment_1_2");
					put(grammarAccess.getTermeAccess().getSigneAssignment_1_0(), "rule__Terme__SigneAssignment_1_0");
					put(grammarAccess.getTermeAccess().getValeurAssignment_1_1(), "rule__Terme__ValeurAssignment_1_1");
					put(grammarAccess.getTermeAccess().getValeurAssignment_2(), "rule__Terme__ValeurAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			compil.dslcalculette.ui.contentassist.antlr.internal.InternalDCalcParser typedParser = (compil.dslcalculette.ui.contentassist.antlr.internal.InternalDCalcParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DCalcGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DCalcGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
