/*
 * generated by Xtext
 */
package compil.dslcalculette.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import compil.dslcalculette.dCalc.AbstractExpression
import java.util.List
import compil.dslcalculette.dCalc.Expression

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class DCalcGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		var aes = resource.allContents.filter(AbstractExpression).toList()
    	fsa.generateFile("DSLCalculette.java", aes.compile)
	}
	
	def compile(List<AbstractExpression> aes) '''
		public class DSLCalculette {
			public static void main(String[] args) {
				«FOR ae: aes»
					System.out.println(«ae.compile»);
				«ENDFOR»
			}
		}
  	'''
  	
  	def compile(AbstractExpression ae) '''
  		«IF ae.expression.left == null»
  			«IF ae.expression.signe != null»
  				«ae.expression.signe»
  			«ENDIF»
  			«ae.expression.valeur»
  		«ELSE»
  			«IF ae.expression.left.signe != null»
  				«ae.expression.left.signe»
  			«ENDIF»
  			«ae.expression.left.valeur» 
  			«IF ae.expression.operateur != null»
  				«ae.expression.operateur» 
  			«ENDIF»
  			«IF ae.expression.right != null»
  				«ae.expression.right.compile»
  			«ENDIF»
  		«ENDIF»
  	'''
  	
  	//TODO: Ajouter les parenthèses
  	def compile(Expression e) '''
  		«IF e.left != null»
  			«IF e.left.signe != null»
  				«e.left.signe»
  			«ENDIF»
  			«e.left.valeur»
  		«ENDIF»
  		«IF e.operateur != null»
  			 «e.operateur» 
  		«ENDIF»
  		«IF e.right != null»
  			«e.right.compile»
  		«ELSE»
  			«IF e.signe != null»
  				«e.signe»
  			«ENDIF»
  			«e.valeur»
  		«ENDIF»
  	'''
}
