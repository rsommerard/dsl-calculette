/*
* generated by Xtext
*/
grammar InternalDCalc;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package compil.dslcalculette.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package compil.dslcalculette.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import compil.dslcalculette.services.DCalcGrammarAccess;

}

@parser::members {

 	private DCalcGrammarAccess grammarAccess;
 	
    public InternalDCalcParser(TokenStream input, DCalcGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected DCalcGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getAbstractExpressionsAbstractExpressionParserRuleCall_0()); 
	    }
		lv_abstractExpressions_0_0=ruleAbstractExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"abstractExpressions",
        		lv_abstractExpressions_0_0, 
        		"AbstractExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleAbstractExpression
entryRuleAbstractExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractExpressionRule()); }
	 iv_ruleAbstractExpression=ruleAbstractExpression 
	 { $current=$iv_ruleAbstractExpression.current; } 
	 EOF 
;

// Rule AbstractExpression
ruleAbstractExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractExpressionAccess().getExpressionExpressionParserRuleCall_0_0()); 
	    }
		lv_expression_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAbstractExpressionAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getOperandeParserRuleCall_0()); 
    }
    this_Operande_0=ruleOperande
    { 
        $current = $this_Operande_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionAccess().getExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operateur_2_1=	'+' 
    {
        newLeafNode(lv_operateur_2_1, grammarAccess.getExpressionAccess().getOperateurPlusSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
       		setWithLastConsumed($current, "operateur", lv_operateur_2_1, null);
	    }

    |		lv_operateur_2_2=	'-' 
    {
        newLeafNode(lv_operateur_2_2, grammarAccess.getExpressionAccess().getOperateurHyphenMinusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
       		setWithLastConsumed($current, "operateur", lv_operateur_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getRightExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOperande
entryRuleOperande returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperandeRule()); }
	 iv_ruleOperande=ruleOperande 
	 { $current=$iv_ruleOperande.current; } 
	 EOF 
;

// Rule Operande
ruleOperande returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOperandeAccess().getTermeParserRuleCall_0()); 
    }
    this_Terme_0=ruleTerme
    { 
        $current = $this_Terme_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOperandeAccess().getExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operateur_2_1=	'*' 
    {
        newLeafNode(lv_operateur_2_1, grammarAccess.getOperandeAccess().getOperateurAsteriskKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperandeRule());
	        }
       		setWithLastConsumed($current, "operateur", lv_operateur_2_1, null);
	    }

    |		lv_operateur_2_2=	'/' 
    {
        newLeafNode(lv_operateur_2_2, grammarAccess.getOperandeAccess().getOperateurSolidusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperandeRule());
	        }
       		setWithLastConsumed($current, "operateur", lv_operateur_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOperandeAccess().getRightExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperandeRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTerme
entryRuleTerme returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermeRule()); }
	 iv_ruleTerme=ruleTerme 
	 { $current=$iv_ruleTerme.current; } 
	 EOF 
;

// Rule Terme
ruleTerme returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTermeAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getTermeAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTermeAccess().getRightParenthesisKeyword_0_2());
    }
)
    |((
(
		lv_signe_3_0=	'-' 
    {
        newLeafNode(lv_signe_3_0, grammarAccess.getTermeAccess().getSigneHyphenMinusKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermeRule());
	        }
       		setWithLastConsumed($current, "signe", lv_signe_3_0, "-");
	    }

)
)(
(
		lv_valeur_4_0=RULE_INT
		{
			newLeafNode(lv_valeur_4_0, grammarAccess.getTermeAccess().getValeurINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"valeur",
        		lv_valeur_4_0, 
        		"INT");
	    }

)
))
    |(
(
		lv_valeur_5_0=RULE_INT
		{
			newLeafNode(lv_valeur_5_0, grammarAccess.getTermeAccess().getValeurINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"valeur",
        		lv_valeur_5_0, 
        		"INT");
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


